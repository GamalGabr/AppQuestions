[
  {
    "id": "1",
    "question": "If the SQL query `SELECT * FROM table WHERE column > 10` retrieves all rows where `column` is greater than 10, what is the Python equivalent?",
    "options": [
      "Python: `df[df['column'] > 10]`",
      "Python: `df.head(10)`",
      "Python: `df.loc['row1', :]`",
      "Python: `df[['column1', 'column2']]`"
    ],
    "correct": "Python: `df[df['column'] > 10]`",
    "explanation": "In SQL, `SELECT * FROM table WHERE column > 10` retrieves all rows where the value in `column` is greater than 10. The equivalent Python operation is boolean indexing with `df[df['column'] > 10]`."
  },
  {
    "id": "2",
    "question": "If the SQL query `SELECT column1, column2 FROM table` retrieves two specific columns, `column1` and `column2`, what is the Python equivalent?",
    "options": [
      "Python: `df[['column1', 'column2']]`",
      "Python: `df['column1', 'column2']`",
      "Python: `df.loc[:, ['column1', 'column2']]`",
      "Python: `df.iloc[:, ['column1', 'column2']]`"
    ],
    "correct": "Python: `df[['column1', 'column2']]`",
    "explanation": "In SQL, `SELECT column1, column2 FROM table` retrieves only the specified columns. The Python equivalent is `df[['column1', 'column2']]`."
  },
  {
    "id": "3",
    "question": "If the SQL query `SELECT * FROM table LIMIT 10` retrieves the first 10 rows of a table, what is the Python equivalent?",
    "options": [
      "Python: `df.head(10)`",
      "Python: `df.tail(10)`",
      "Python: `df[:10]`",
      "Python: `df.iloc[:10, :]`"
    ],
    "correct": "Python: `df.head(10)`",
    "explanation": "In SQL, `SELECT * FROM table LIMIT 10` retrieves the first 10 rows. The Python equivalent is `df.head(10)`."
  },
  {
    "id": "4",
    "question": "If the SQL query `SELECT COUNT(*) FROM table` returns the total number of rows in the table, what is the Python equivalent?",
    "options": [
      "Python: `len(df)`",
      "Python: `df.count()`",
      "Python: `df.shape[0]`",
      "Python: `df.size`"
    ],
    "correct": "Python: `df.shape[0]`",
    "explanation": "In SQL, `SELECT COUNT(*) FROM table` counts the rows in the table. The Python equivalent is `df.shape[0]`, which gives the number of rows in a DataFrame."
  },
  {
    "id": "5",
    "question": "If the SQL query `SELECT DISTINCT column FROM table` retrieves unique values in `column`, what is the Python equivalent?",
    "options": [
      "Python: `df['column'].unique()`",
      "Python: `df.drop_duplicates('column')`",
      "Python: `df['column'].value_counts()`",
      "Python: `df.sort_values('column')`"
    ],
    "correct": "Python: `df['column'].unique()`",
    "explanation": "In SQL, `SELECT DISTINCT column FROM table` retrieves all unique values in the specified column. The Python equivalent is `df['column'].unique()`."
  },
  {
    "id": "6",
    "question": "If the SQL query `SELECT SUM(column) FROM table` computes the sum of all values in `column`, what is the Python equivalent?",
    "options": [
      "Python: `df['column'].sum()`",
      "Python: `df['column'].count()`",
      "Python: `df['column'].mean()`",
      "Python: `df['column'].max()`"
    ],
    "correct": "Python: `df['column'].sum()`",
    "explanation": "In SQL, `SELECT SUM(column) FROM table` computes the total sum of the column's values. The Python equivalent is `df['column'].sum()`."
  },
  {
    "id": "7",
    "question": "If the SQL query `SELECT column, AVG(value) FROM table GROUP BY column` calculates the average `value` for each `column`, what is the Python equivalent?",
    "options": [
      "Python: `df.groupby('column')['value'].mean()`",
      "Python: `df['value'].groupby('column').mean()`",
      "Python: `df.groupby('value')['column'].mean()`",
      "Python: `df['value'].mean()`"
    ],
    "correct": "Python: `df.groupby('column')['value'].mean()`",
    "explanation": "In SQL, `SELECT column, AVG(value) FROM table GROUP BY column` calculates averages per group. The Python equivalent is `df.groupby('column')['value'].mean()`."
  },
  {
    "id": "8",
    "question": "If the SQL query `SELECT * FROM table1 INNER JOIN table2 ON table1.key = table2.key` performs an inner join, what is the Python equivalent?",
    "options": [
      "Python: `pd.merge(df1, df2, on='key')`",
      "Python: `df1.join(df2, how='inner')`",
      "Python: `pd.concat([df1, df2], axis=1)`",
      "Python: `df1.append(df2)`"
    ],
    "correct": "Python: `pd.merge(df1, df2, on='key')`",
    "explanation": "In SQL, `INNER JOIN` combines two tables based on a common key. The Python equivalent is `pd.merge(df1, df2, on='key')`."
  },
  {
    "id": "9",
    "question": "If the SQL query `DELETE FROM table WHERE column IS NULL` removes rows with null values in `column`, what is the Python equivalent?",
    "options": [
      "Python: `df.dropna(subset=['column'])`",
      "Python: `df = df[df['column'].notnull()]`",
      "Python: `df['column'].fillna(0)`",
      "Python: `df['column'].replace(np.nan, 0)`"
    ],
    "correct": "Python: `df.dropna(subset=['column'])`",
    "explanation": "In SQL, `DELETE FROM table WHERE column IS NULL` removes rows with null values in `column`. The Python equivalent is `df.dropna(subset=['column'])`."
  },
  {
    "id": "10",
    "question": "If the SQL query `ALTER TABLE table DROP COLUMN column` removes a column, what is the Python equivalent?",
    "options": [
      "Python: `df.drop('column', axis=1, inplace=True)`",
      "Python: `df['column'] = None`",
      "Python: `df['column'] = np.nan`",
      "Python: `del df['column']`"
    ],
    "correct": "Python: `df.drop('column', axis=1, inplace=True)`",
    "explanation": "In SQL, `ALTER TABLE table DROP COLUMN column` deletes a column. The Python equivalent is `df.drop('column', axis=1, inplace=True)`."
  },
  {
    "id": "11",
    "question": "If the SQL query `SELECT column1 || column2 AS combined FROM table` concatenates two columns, what is the Python equivalent?",
    "options": [
      "Python: `df['combined'] = df['column1'] + df['column2']`",
      "Python: `df['combined'] = df['column1'].str.cat(df['column2'])`",
      "Python: `df['combined'] = df[['column1', 'column2']].apply(lambda x: ''.join(x), axis=1)`",
      "Python: `df['combined'] = df['column1'] * df['column2']`"
    ],
    "correct": "Python: `df['combined'] = df['column1'] + df['column2']`",
    "explanation": "In SQL, `SELECT column1 || column2 AS combined FROM table` concatenates two columns. The Python equivalent is `df['combined'] = df['column1'] + df['column2']`."
  },
  {
    "id": "12",
    "question": "If the SQL query `UPDATE table SET column = column * 2` doubles the values in a column, what is the Python equivalent?",
    "options": [
      "Python: `df['column'] = df['column'] * 2`",
      "Python: `df['column'] = df['column'] / 2`",
      "Python: `df['column'] = df['column'] + 2`",
      "Python: `df['column'] = df['column'] - 2`"
    ],
    "correct": "Python: `df['column'] = df['column'] * 2`",
    "explanation": "In SQL, `UPDATE table SET column = column * 2` multiplies the column values by 2. The Python equivalent is `df['column'] = df['column'] * 2`."
  }
]
